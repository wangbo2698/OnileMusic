package dao;

import java.sql.PreparedStatement;
import java.sql.Connection;
import entity.music;
import util.DButils;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class lovemusicdao {
    public boolean insertLoveMusic(int userId, int musicId) {
        java.sql.Connection connection = null;
        java.sql.PreparedStatement preparedStatement = null;
        try {
            String sql = "insert into lovemusic(user_id, music_id) VALUES (?,?)";
            connection = DButils.getConn();

            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, userId);
            preparedStatement.setInt(2, musicId);
            int ret = preparedStatement.executeUpdate();
            if (ret == 1) {
                return true;
            }
            return false;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DButils.getClose(connection, preparedStatement, null);
        }
        return false;
    }

    public  List<music> findLovemusic(int user_id) {
        List<music> musics = new ArrayList<>();
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            conn = DButils.getConn();
            ps = conn.prepareStatement("select m.id as music_id,title,singer,time,url,userid from lovemusic lm,music m where lm.music_id=m.id and user_id=?");
            ps.setInt(1, user_id);
            rs = ps.executeQuery();
            while (rs.next()) {
                music music = new music();
                music.setId(rs.getInt("music_id"));
                music.setTitle(rs.getString("title"));
                music.setSinger(rs.getString("singer"));
                music.setTime(rs.getString("time"));
                music.setUrl(rs.getString("url"));
                music.setUserid(rs.getInt("userid"));
                musics.add(music);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            DButils.getClose(conn, ps, rs);
        }
        return musics;
    }

    public boolean findLoveMusicByMusicIdAndUserId(int user_id, int musicID) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            conn = DButils.getConn();
            ps = conn.prepareStatement("select * from lovemusic where music_id=? and user_id=?");
            ps.setInt(1, musicID);
            ps.setInt(2, user_id);
            rs = ps.executeQuery();
            if (rs.next()) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            DButils.getClose(conn, ps, rs);
        }
        return false;
    }

    public static int removeLoveMusic(int userId, int musicId) {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        try {String sql = "delete from lovemusic where user_id=? and music_id=?";
            connection = DButils.getConn();
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1,userId);
            preparedStatement.setInt(2,musicId);
            int ret = preparedStatement.executeUpdate();
            if(ret == 1) {
                return ret;
            }
        }catch (SQLException e) { e.printStackTrace();
        }finally {
            DButils.getClose(connection,preparedStatement,null);
        }return 0;
    }

    public List<music> findLoveMusicBykeyAndUID(String str, int user_id){
    List<music> musics = new ArrayList<>();
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null; try {conn = DButils.getConn();
            ps = conn.prepareStatement("select m.id as music_id,title,singer,time,url,userid from lovemusic lm,music m where lm.music_id=m.id and user_id=? and title like '%"+str+"%'");
            ps.setInt(1,user_id);
            rs = ps.executeQuery();
            while(rs.next()) {
                music music = new music();
                music.setId(rs.getInt("music_id"));
                music.setTitle(rs.getString("title"));
                music.setSinger(rs.getString("singer"));
                music.setTime(rs.getString("time"));
                music.setUrl(rs.getString("url"));
                music.setUserid(rs.getInt("userid"));
                musics.add(music);
                }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
         DButils.getClose(conn, ps, rs);
        }return musics;
    }
}
 
 
 
 
 
 
 
 
 
 
 package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import entity.music;
import util.DButils;

public class musicdao {
     public int insert(String title, String singer, String time, String url, int userid) {
         Connection conn = null;
         PreparedStatement ps = null;
         try {conn = DButils.getConn();
             String sql = "insert into music(title,singer,time,url,userid) values(?,?,?,?,?)";
             ps = conn.prepareStatement(sql);
             ps.setString(1,title);
             ps.setString(2,singer);
             ps.setString(3,time);
             ps.setString(4,url);
             ps.setInt(5,userid);
             int ret = ps.executeUpdate();
             if(ret == 1){
                 return ret;
             }
         }catch (SQLException e) {
             e.printStackTrace();
         }finally
         { DButils.getClose(conn,ps,null);
         }
         return 0;
     }


     public List<music> findmusic(){
         List<music> musicList = new ArrayList<>();
         Connection conn = null;
         PreparedStatement ps = null;
         ResultSet rs = null;
         try {conn = DButils.getConn();
             String sql = "select * from music";
             ps = conn.prepareStatement(sql);
             rs = ps.executeQuery();
             while (rs.next()) {
                 music music = new music();
                 music.setId(rs.getInt("id"));
                 music.setSinger(rs.getString("singer"));
                 music.setTime(rs.getString("time"));
                 music.setUrl(rs.getString("url"));
                 music.setUserid(rs.getInt("userid"));
                 musicList.add(music);
             }
         }catch (SQLException e) {
             e.printStackTrace();
         }finally {
             DButils.getClose(conn,ps,null);
         }return musicList;
     }

    public music findmusicById(int id){
         Connection conn = null;
         PreparedStatement ps = null;
         ResultSet rs = null;
         music music = null;
         try {conn = DButils.getConn();
             String sql = "select * from music where id = ?";
             ps = conn.prepareStatement(sql);
             ps.setInt(1,id);
             rs = ps.executeQuery();
            if (rs.next()) { music = new music();
            music.setId(rs.getInt("id"));
            music.setTitle(rs.getString("title"));
            music.setSinger(rs.getString("singer"));
            music.setTime(rs.getString("time"));
            music.setUrl(rs.getString("url"));
            music.setUserid(rs.getInt("userid"));
        }
    }
    catch (SQLException e) { e.printStackTrace();
    }finally 
    { 
        DButils.getClose(conn,ps,null);
    }
    return music; 
     }
    public List<music> ifmusic(String str){
        List<music> musics = new ArrayList<>();
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null; try {conn = DButils.getConn();
            ps = conn.prepareStatement("select*from music where title like '%"+str+"%'");
            rs = ps.executeQuery();
            while(rs.next()) {
                music music = new music();
            music.setId(rs.getInt("id"));
            music.setTitle(rs.getString("title"));
            music.setSinger(rs.getString("singer"));
            music.setTime(rs.getString("time"));
            music.setUrl(rs.getString("url"));
            music.setUserid(rs.getInt("userid"));
            musics.add(music);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally { DButils.getClose(conn, ps, rs);
        }
        return musics;

    }
 public int deletemusicById(int musicId) {
     Connection connection = null;
     PreparedStatement preparedStatement = null;
     try {String sql = "delete from music where id=?";
         connection = DButils.getConn();
         preparedStatement = connection.prepareStatement(sql);
         preparedStatement.setInt(1,musicId);
         int ret = preparedStatement.executeUpdate();
         if(ret == 1) {
             if(findLoveMusicById(musicId))
             { int ret2 = deleteLoveMusicById(musicId);
             if(ret2 == 1){ return 1; }
             }
             else {
                 return 1;
             }
         }
     }
     catch (SQLException e) { e.printStackTrace();
     }finally { DButils.getClose(connection,preparedStatement,null);
     }return 0;
     }




    public boolean findLoveMusicById(int musicId) {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {String sql = "select * from lovemusic where music_id=?";
            connection = DButils.getConn();
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1,musicId);
            resultSet = preparedStatement.executeQuery();
            if(resultSet.next()) {
                return true;
            }
        }
        catch (SQLException e) {

            e.printStackTrace();
        }finally { DButils.getClose(connection,preparedStatement,null);
        }
        return false;
     }


 public int deleteLoveMusicById(int musicId) {
     Connection connection = null;
     PreparedStatement preparedStatement = null;
     try {String sql = "delete from lovemusic where music_id=?";
         connection = DButils.getConn();
         preparedStatement = connection.prepareStatement(sql);
         preparedStatement.setInt(1,musicId);
         int ret = preparedStatement.executeUpdate();
         if(ret == 1) { return ret;
         } }catch (SQLException e) { e.printStackTrace();
     }
     finally
     {
         DButils.getClose(connection,preparedStatement,null);
     }
     return 0;
     }

    public List<music> findmusicByKey(String str) {
         List<music> musics = new ArrayList<>();
            Connection conn = null;
            PreparedStatement ps = null;
            ResultSet rs = null;
            try {conn = DButils.getConn();
                ps = conn.prepareStatement("select*from music where title like '%"+str+"%'");
                rs = ps.executeQuery();
                while(rs.next()) { music music = new music();
                music.setId(rs.getInt("id"));
                music.setTitle(rs.getString("title"));
                music.setSinger(rs.getString("singer"));
                music.setTime(rs.getString("time"));
                music.setUserid(rs.getInt("userid"));
                musics.add(music);
                }
            } catch (Exception e) { e.printStackTrace();
            throw new RuntimeException(e);
            } finally {
                DButils.getClose(conn, ps, rs);
            }
            return musics;
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    package dao;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import entity.user;
import util.DButils;

public class Userdao {
    public user login(user loginUser) {
    user user = null;
    Connection conn = null;
    PreparedStatement ps = null;

         ResultSet rs = null;
         try {conn = DButils.getConn();
        ps = conn.prepareStatement("select*from user where username=? and password=?");
        ps.setString(1, user.getUsername());
        ps.setString(2, user.getPassword());
        rs = ps.executeQuery();
        while(rs.next()) { user = new user();
        user.setId(rs.getInt("id"));
        user.setUsername(rs.getString("username"));
        user.setPassword(rs.getString("password"));
        user.setAge(rs.getInt("age"));
        user.setGender(rs.getString("gender"));
        user.setEmail(rs.getString("email"));
        }
         } catch (Exception e) {
             e.printStackTrace();
         throw new RuntimeException(e);
         }
         finally {
             DButils.getClose(conn, ps, rs);
         }
         return user;
        }
    public void register(user user) {
    Connection conn = null;
    PreparedStatement ps = null;
    try {conn = DButils.getConn();
        ps = conn.prepareStatement("insert into user values(null,?,?,?,?,?)");
        ps.setString(1, user.getUsername());
        ps.setString(2, user.getPassword());
        ps.setString(3, user.getGender());
        ps.setInt(4, user.getAge());
        ps.setString(5, user.getEmail());
        ps.executeUpdate();
    }
    catch (Exception e) {
        e.printStackTrace();
        throw new RuntimeException(e);
    }
    finally {
        DButils.getClose(conn, ps, null);
        }
    }
}

